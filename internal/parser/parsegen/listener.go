// generated by Textmapper; DO NOT EDIT

package parsegen

import (
	"fmt"
)

type NodeType int

type Listener func(t NodeType, offset, endoffset int)

const (
	NoType NodeType = iota
	EnumName
	EnumValue
	FieldMod
	FieldName
	ListElement
	MapKeyType
	MapValueType
	MessageName
	OptionBool
	OptionFloat
	OptionInt
	OptionName
	OptionString
	PubMessage
	PubName
	RpcName
	RpcRequest
	RpcResponse
	ScalarType
	ServiceName
	NodeTypeMax
)

var nodeTypeStr = [...]string{
	"NONE",
	"EnumName",
	"EnumValue",
	"FieldMod",
	"FieldName",
	"ListElement",
	"MapKeyType",
	"MapValueType",
	"MessageName",
	"OptionBool",
	"OptionFloat",
	"OptionInt",
	"OptionName",
	"OptionString",
	"PubMessage",
	"PubName",
	"RpcName",
	"RpcRequest",
	"RpcResponse",
	"ScalarType",
	"ServiceName",
}

func (t NodeType) String() string {
	if t >= 0 && int(t) < len(nodeTypeStr) {
		return nodeTypeStr[t]
	}
	return fmt.Sprintf("node(%d)", t)
}
