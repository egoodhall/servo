package main

import (
	"fmt"
	"os"

	"github.com/dave/jennifer/jen"
	"github.com/egoodhall/servo/pkg/ast"
	"github.com/hashicorp/go-retryablehttp"
	"github.com/iancoleman/strcase"
)

const (
	pkgEcho      = "github.com/labstack/echo/v4"
	pkgHttp      = "net/http"
	pkgGentleman = "gopkg.in/h2non/gentleman.v2"
	pkgUrl       = "net/url"
)

func (x *GoNrpcPlugin) Generate(file *ast.File, options Options) error {
	retryablehttp.NewClient()
	if !options.Enabled {
		return nil
	}

	content, err := generateFile(file, options)
	if err != nil {
		return err
	}

	f, err := os.OpenFile(options.File, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0600)
	if err != nil {
		return err
	}
	defer f.Close()

	return content.Render(f)
}

func generateFile(file *ast.File, options Options) (*jen.File, error) {
	gofile := jen.NewFile(options.Package)
	gofile.PackageComment("Code generated by servoc (gohttp plugin). DO NOT EDIT.")

	for _, svc := range file.Services {
		names := getServiceNames(svc.Name)

		gofile.ImportNames(map[string]string{
			pkgEcho:      "echo",
			pkgHttp:      "http",
			pkgGentleman: "gentleman",
			pkgUrl:       "url",
		})

		gofile.Func().Id(names.ServerConstructor).
			Params(jen.Id("service").Id(names.Service)).
			Op("*").Qual(pkgEcho, "Echo").
			Block(
				jen.Id("server").Op(":=").Qual(pkgEcho, "New").Params(),
				jen.Id(names.RegisterFunc).Params(jen.Id("service"), jen.Id("server")),
				jen.Return(jen.Id("server")),
			)

		gofile.Line()

		gofile.Func().Id(names.RegisterFunc).
			Params(
				jen.Id("service").Id(names.Service),
				jen.Id("server").Op("*").Qual(pkgEcho, "Echo"),
			).
			BlockFunc(func(g *jen.Group) {
				for _, rpc := range svc.Rpcs {
					g.Id("server").Dot("POST").Params(
						jen.Lit(fmt.Sprintf("%s/%s", strcase.ToKebab(svc.Name), strcase.ToKebab(rpc.Name))),
						generateRpcHandler(rpc),
					)
				}

				for _, pub := range svc.Pubs {
					g.Id("server").Dot("POST").Params(
						jen.Lit(fmt.Sprintf("%s/%s", strcase.ToKebab(svc.Name), strcase.ToKebab(pub.Name))),
						generatePubHandler(pub),
					)
				}
			})

		gofile.Line()

		gofile.Func().Id(names.ClientConstructor).
			Params().
			List(jen.Id(names.Service)).
			Block(
				jen.Return(jen.Id(names.DelegatingClientConstructor).Params(
					jen.Qual(pkgGentleman, "New").Params()),
				),
			)

		gofile.Line()

		gofile.Func().Id(names.DelegatingClientConstructor).
			Params(jen.Id("delegate").Op("*").Qual(pkgGentleman, "Client")).
			List(jen.Id(names.Service)).
			Block(
				jen.Return(jen.Op("&").Id(names.ClientImpl).Values(jen.Id("delegate"))),
			)

		gofile.Line()

		gofile.Type().Id(names.ClientImpl).Struct(
			jen.Id("delegate").Op("*").Qual(pkgGentleman, "Client"),
		)

		gofile.Line()

		for _, rpc := range svc.Rpcs {
			gofile.Func().Params(jen.Id("client").Op("*").Id(names.ClientImpl)).
				Id(strcase.ToCamel(rpc.Name)).
				Params(jen.Id("request").Op("*").Id(rpc.Request)).
				Params(jen.Op("*").Id(rpc.Response), jen.Error()).
				Block(
					jen.Id("req").Op(":=").Id("client").Dot("delegate").
						Dot("Post").Params().
						Dot("Path").Params(jen.Lit(fmt.Sprintf("/%s/%s", strcase.ToKebab(svc.Name), strcase.ToKebab(rpc.Name)))).
						Dot("JSON").Params(jen.Id("request")),
					jen.List(jen.Id("res"), jen.Err()).Op(":=").Id("req").Dot("Do").Params(),
					jen.If(jen.Err().Op("!=").Nil()).Block(
						jen.Return(jen.Nil(), jen.Err()),
					),
					jen.Id("response").Op(":=").New(jen.Id(rpc.Response)),
					jen.Return(jen.Id("response"), jen.Id("res").Dot("JSON").Params(jen.Id("response"))),
				)
		}

		for _, pub := range svc.Pubs {
			gofile.Func().Params(jen.Id("client").Op("*").Id(names.ClientImpl)).
				Id(strcase.ToCamel(pub.Name)).
				Params(jen.Id("request").Op("*").Id(pub.Message)).
				Error().
				Block(
					jen.Id("req").Op(":=").Id("client").Dot("delegate").
						Dot("Post").Params().
						Dot("Path").Params(jen.Lit(fmt.Sprintf("/%s/%s", strcase.ToKebab(svc.Name), strcase.ToKebab(pub.Name)))).
						Dot("JSON").Params(jen.Id("request")),
					jen.List(jen.Id("_"), jen.Err()).Op(":=").Id("req").Dot("Do").Params(),
					jen.Return(jen.Err()),
				)
		}
	}

	return gofile, nil
}

func generateRpcHandler(rpc *ast.Rpc) *jen.Statement {
	return jen.Func().Params(jen.Id("c").Qual(pkgEcho, "Context")).Error().Block(
		jen.Id("req").Op(":=").New(jen.Id(rpc.Request)),
		jen.If(
			jen.Err().Op(":=").Id("c").Dot("Bind").Params(jen.Id("req")),
			jen.Err().Op("!=").Nil(),
		).Block(
			jen.Return(jen.Err()),
		),
		jen.List(jen.Id("res"), jen.Err()).Op(":=").Id("service").Dot(strcase.ToCamel(rpc.Name)).Params(
			jen.Id("req"),
		),
		jen.If(jen.Err().Op("!=").Nil()).Block(
			jen.Return(jen.Qual(pkgEcho, "NewHTTPError").Params(
				jen.Qual(pkgHttp, "StatusBadRequest"),
				jen.Err(),
			)),
		),
		jen.Return(jen.Id("c").Dot("JSON").Params(
			jen.Qual(pkgHttp, "StatusOK"),
			jen.Id("res"),
		)),
	)
}

func generatePubHandler(pub *ast.Pub) *jen.Statement {
	return jen.Func().Params(jen.Id("c").Qual(pkgEcho, "Context")).Error().Block(
		jen.Id("req").Op(":=").New(jen.Id(pub.Message)),
		jen.If(
			jen.Err().Op(":=").Id("c").Dot("Bind").Params(jen.Id("req")),
			jen.Err().Op("!=").Nil(),
		).Block(
			jen.Return(jen.Err()),
		),
		jen.Err().Op(":=").Id("service").Dot(strcase.ToCamel(pub.Name)).Params(
			jen.Id("req"),
		),
		jen.If(jen.Err().Op("!=").Nil()).Block(
			jen.Return(jen.Qual(pkgEcho, "NewHTTPError").Params(
				jen.Qual(pkgHttp, "StatusBadRequest"),
				jen.Err(),
			)),
		),
		jen.Return(jen.Id("c").Dot("NoContent").Params(
			jen.Qual(pkgHttp, "StatusNoContent"),
		)),
	)
}

type serviceNames struct {
	Service                     string
	ClientConstructor           string
	DelegatingClientConstructor string
	ClientImpl                  string
	ServerConstructor           string
	ServerImpl                  string
	RegisterFunc                string
}

func getServiceNames(svc string) serviceNames {
	return serviceNames{
		Service: strcase.ToCamel(svc),

		ClientConstructor:           "New" + strcase.ToCamel(svc) + "HttpClient",
		DelegatingClientConstructor: "NewDelegating" + strcase.ToCamel(svc) + "HttpClient",
		ClientImpl:                  strcase.ToLowerCamel(svc) + "HttpClient",
		ServerConstructor:           "New" + strcase.ToCamel(svc) + "HttpServer",
		ServerImpl:                  strcase.ToLowerCamel(svc) + "HttpServer",
		RegisterFunc:                "Register" + strcase.ToCamel(svc) + "Endpoints",
	}
}
