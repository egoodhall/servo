// Code generated by polyjson. DO NOT EDIT.

package ast

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// JSON marshaler implementations for Type.

func (v ScalarType) MarshalJSON() ([]byte, error) {
	type rawScalarType ScalarType
	return json.Marshal(struct {
		rawScalarType
		Kind string `json:"kind"`
	}{rawScalarType: rawScalarType(v), Kind: "ScalarType"})
}

var _ json.Marshaler = ScalarType{}

func (v MapType) MarshalJSON() ([]byte, error) {
	type rawMapType MapType
	return json.Marshal(struct {
		rawMapType
		Kind string `json:"kind"`
	}{rawMapType: rawMapType(v), Kind: "MapType"})
}

var _ json.Marshaler = MapType{}

func (v ListType) MarshalJSON() ([]byte, error) {
	type rawListType ListType
	return json.Marshal(struct {
		rawListType
		Kind string `json:"kind"`
	}{rawListType: rawListType(v), Kind: "ListType"})
}

var _ json.Marshaler = ListType{}

func UnmarshalTypeJSON(b []byte) (Type, error) {
	if len(b) == 0 || bytes.Equal(b, []byte("null")) {
		return nil, nil
	}

	var probe struct {
		Kind string `json:"kind"`
	}
	if err := json.Unmarshal(b, &probe); err != nil {
		return nil, fmt.Errorf("unmarshal Type kind: %v", err)
	}

	switch probe.Kind {
	case "ScalarType":
		var v ScalarType
		if err := json.Unmarshal(b, &v); err != nil {
			return nil, fmt.Errorf("unmarshal ScalarType: %v", err)
		}
		return v, nil
	case "MapType":
		var v MapType
		if err := json.Unmarshal(b, &v); err != nil {
			return nil, fmt.Errorf("unmarshal MapType: %v", err)
		}
		return v, nil
	case "ListType":
		var v ListType
		if err := json.Unmarshal(b, &v); err != nil {
			return nil, fmt.Errorf("unmarshal ListType: %v", err)
		}
		return v, nil
	default:
		return nil, fmt.Errorf("could not unmarshal Type JSON: unknown variant %q", probe.Kind)
	}
}

// JSON marshaler implementations for Field containing polymorphic fields.

func (v *Field) UnmarshalJSON(b []byte) error {
	type rawField Field
	var data struct {
		rawField

		Type json.RawMessage `json:"type"`
	}
	if err := json.Unmarshal(b, &data); err != nil {
		return fmt.Errorf("unmarshal Field: %v", err)
	}

	typeField, err := UnmarshalTypeJSON(data.Type)
	if err != nil {
		return fmt.Errorf("unmarshal Field.Type: %v", err)
	}

	*v = Field(data.rawField)
	v.Type = typeField
	return nil
}

var _ json.Unmarshaler = &Field{}
