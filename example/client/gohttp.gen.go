// Code generated by servoc (gohttp plugin). DO NOT EDIT.
package main

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"net/http"
	"net/url"
	"strconv"
)

/////////////////////////////
// EchoService HTTP client //
/////////////////////////////

type EchoServiceHttpClient interface {
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
}

func NewEchoServiceHttpClient(baseUrl string) EchoServiceHttpClient {
	return NewDelegatingEchoServiceHttpClient(baseUrl, new(http.Client))
}

func NewDelegatingEchoServiceHttpClient(baseUrl string, delegate *http.Client) EchoServiceHttpClient {
	return &echoServiceHttpClient{baseUrl, delegate}
}

var _ EchoServiceHttpClient = new(echoServiceHttpClient)

type echoServiceHttpClient struct {
	baseUrl  string
	delegate *http.Client
}

func (client *echoServiceHttpClient) Echo(ctx context.Context, request *EchoRequest) (*EchoResponse, error) {
	u, err := url.JoinPath(client.baseUrl, "/echo-service/echo")
	if err != nil {
		return nil, err
	}

	body := new(bytes.Buffer)
	if err := json.NewEncoder(body).Encode(request); err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, http.MethodPost, u, body)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")

	res, err := client.delegate.Do(req)
	if err != nil {
		return nil, err
	}
	defer res.Body.Close()

	if res.StatusCode != http.StatusOK {
		return nil, errors.New("unexpected status code " + strconv.Itoa(res.StatusCode))
	}

	response := new(EchoResponse)
	return response, json.NewDecoder(res.Body).Decode(response)
}

//////////////////////////////////
// TelemetryService HTTP client //
//////////////////////////////////

type TelemetryServiceHttpClient interface {
	Publish(context.Context, *Telemetry) error
}

func NewTelemetryServiceHttpClient(baseUrl string) TelemetryServiceHttpClient {
	return NewDelegatingTelemetryServiceHttpClient(baseUrl, new(http.Client))
}

func NewDelegatingTelemetryServiceHttpClient(baseUrl string, delegate *http.Client) TelemetryServiceHttpClient {
	return &telemetryServiceHttpClient{baseUrl, delegate}
}

var _ TelemetryServiceHttpClient = new(telemetryServiceHttpClient)

type telemetryServiceHttpClient struct {
	baseUrl  string
	delegate *http.Client
}

func (client *telemetryServiceHttpClient) Publish(ctx context.Context, request *Telemetry) error {
	u, err := url.JoinPath(client.baseUrl, "/telemetry-service/publish")
	if err != nil {
		return err
	}

	body := new(bytes.Buffer)
	if err := json.NewEncoder(body).Encode(request); err != nil {
		return err
	}

	req, err := http.NewRequestWithContext(ctx, http.MethodPost, u, body)
	if err != nil {
		return err
	}
	req.Header.Set("Content-Type", "application/json")

	res, err := client.delegate.Do(req)
	if err != nil {
		return err
	}
	defer res.Body.Close()

	if res.StatusCode != http.StatusNoContent {
		return errors.New("unexpected status code " + strconv.Itoa(res.StatusCode))
	}
	return nil
}
