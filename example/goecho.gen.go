// Code generated by servoc (gohttp plugin). DO NOT EDIT.
package example

import (
	"context"
	"github.com/labstack/echo/v4"
	"gopkg.in/h2non/gentleman.v2"
	"net/http"
)

func NewEchoServiceHttpServer(service EchoService) *echo.Echo {
	server := echo.New()
	RegisterEchoServiceEndpoints(service, server.Group("/"))
	return server
}

func RegisterEchoServiceEndpoints(service EchoService, server *echo.Group) {
	server.POST("echo-service/echo", func(c echo.Context) error {
		req := new(EchoRequest)
		if err := c.Bind(req); err != nil {
			return err
		}
		res, err := service.Echo(c.Request().Context(), req)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, err)
		}
		return c.JSON(http.StatusOK, res)
	})
}

func NewEchoServiceHttpClient() EchoService {
	return NewDelegatingEchoServiceHttpClient(gentleman.New())
}

func NewDelegatingEchoServiceHttpClient(delegate *gentleman.Client) EchoService {
	return &echoServiceHttpClient{delegate}
}

var _ EchoService = new(echoServiceHttpClient)

type echoServiceHttpClient struct {
	delegate *gentleman.Client
}

func (client *echoServiceHttpClient) Echo(ctx context.Context, request *EchoRequest) (*EchoResponse, error) {
	req := client.delegate.Post().Path("/echo-service/echo").JSON(request)
	req.Context.SetCancelContext(ctx)
	res, err := req.Do()
	if err != nil {
		return nil, err
	}
	response := new(EchoResponse)
	return response, res.JSON(response)
}
func NewTelemetryServiceHttpServer(service TelemetryService) *echo.Echo {
	server := echo.New()
	RegisterTelemetryServiceEndpoints(service, server.Group("/"))
	return server
}

func RegisterTelemetryServiceEndpoints(service TelemetryService, server *echo.Group) {
	server.POST("telemetry-service/publish", func(c echo.Context) error {
		req := new(Telemetry)
		if err := c.Bind(req); err != nil {
			return err
		}
		err := service.Publish(c.Request().Context(), req)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, err)
		}
		return c.NoContent(http.StatusNoContent)
	})
}

func NewTelemetryServiceHttpClient() TelemetryService {
	return NewDelegatingTelemetryServiceHttpClient(gentleman.New())
}

func NewDelegatingTelemetryServiceHttpClient(delegate *gentleman.Client) TelemetryService {
	return &telemetryServiceHttpClient{delegate}
}

var _ TelemetryService = new(telemetryServiceHttpClient)

type telemetryServiceHttpClient struct {
	delegate *gentleman.Client
}

func (client *telemetryServiceHttpClient) Publish(ctx context.Context, request *Telemetry) error {
	req := client.delegate.Post().Path("/telemetry-service/publish").JSON(request)
	req.Context.SetCancelContext(ctx)
	_, err := req.Do()
	return err
}
