// Code generated by servoc (gohttp plugin). DO NOT EDIT.
package example

import (
	"github.com/labstack/echo/v4"
	"gopkg.in/h2non/gentleman.v2"
	"net/http"
)

func NewEchoServiceHttpServer(service EchoService) *echo.Echo {
	server := echo.New()
	RegisterEchoServiceEndpoints(service, server)
	return server
}

func RegisterEchoServiceEndpoints(service EchoService, server *echo.Echo) {
	server.POST("echo-service/echo", func(c echo.Context) error {
		req := new(EchoRequest)
		if err := c.Bind(req); err != nil {
			return err
		}
		res, err := service.Echo(req)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, err)
		}
		return c.JSON(http.StatusOK, res)
	})
}

func NewEchoServiceHttpClient() EchoService {
	return NewDelegatingEchoServiceHttpClient(gentleman.New())
}

func NewDelegatingEchoServiceHttpClient(delegate *gentleman.Client) EchoService {
	return &echoServiceHttpClient{delegate}
}

type echoServiceHttpClient struct {
	delegate *gentleman.Client
}

func (client *echoServiceHttpClient) Echo(request *EchoRequest) (*EchoResponse, error) {
	req := client.delegate.Post().Path("/echo-service/echo").JSON(request)
	res, err := req.Do()
	if err != nil {
		return nil, err
	}
	response := new(EchoResponse)
	return response, res.JSON(response)
}
func NewMetricsPublisherHttpServer(service MetricsPublisher) *echo.Echo {
	server := echo.New()
	RegisterMetricsPublisherEndpoints(service, server)
	return server
}

func RegisterMetricsPublisherEndpoints(service MetricsPublisher, server *echo.Echo) {
	server.POST("metrics-publisher/publish", func(c echo.Context) error {
		req := new(Metric)
		if err := c.Bind(req); err != nil {
			return err
		}
		err := service.Publish(req)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, err)
		}
		return c.NoContent(http.StatusNoContent)
	})
}

func NewMetricsPublisherHttpClient() MetricsPublisher {
	return NewDelegatingMetricsPublisherHttpClient(gentleman.New())
}

func NewDelegatingMetricsPublisherHttpClient(delegate *gentleman.Client) MetricsPublisher {
	return &metricsPublisherHttpClient{delegate}
}

type metricsPublisherHttpClient struct {
	delegate *gentleman.Client
}

func (client *metricsPublisherHttpClient) Publish(request *Metric) error {
	req := client.delegate.Post().Path("/metrics-publisher/publish").JSON(request)
	_, err := req.Do()
	return err
}
