// Code generated by servoc (gohttp plugin). DO NOT EDIT.
package main

import (
	"github.com/labstack/echo/v4"
	"net/http"
)

/////////////////////////////
// EchoService HTTP server //
/////////////////////////////

type EchoServiceHttpEndpoints interface {
	Echo(echo.Context, *EchoRequest) (*EchoResponse, error)
}

func NewEchoServiceHttpServer(svc EchoServiceHttpEndpoints) *echo.Echo {
	srv := echo.New()
	RegisterEchoServiceRPCs(svc, srv)
	return srv
}

func RegisterEchoServiceRPCs(svc EchoServiceHttpEndpoints, srv *echo.Echo) {
	RegisterEchoServiceRPCsGroup(svc, srv.Group("/"))
}

func RegisterEchoServiceRPCsGroup(svc EchoServiceHttpEndpoints, srv *echo.Group) {
	compat := &echoServiceHttpAdapter{svc}
	srv.POST("echo-service/echo", compat.Echo)
}

type echoServiceHttpAdapter struct {
	svc EchoServiceHttpEndpoints
}

// HTTP compatibility wrapper for EchoService.echo.
func (s *echoServiceHttpAdapter) Echo(c echo.Context) error {
	req := new(EchoRequest)
	if err := c.Bind(req); err != nil {
		return err
	}
	res, err := s.svc.Echo(c, req)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}
	return c.JSON(http.StatusOK, res)
}

//////////////////////////////////
// TelemetryService HTTP server //
//////////////////////////////////

type TelemetryServiceHttpEndpoints interface {
	Publish(echo.Context, *Telemetry) error
}

func NewTelemetryServiceHttpServer(svc TelemetryServiceHttpEndpoints) *echo.Echo {
	srv := echo.New()
	RegisterTelemetryServiceRPCs(svc, srv)
	return srv
}

func RegisterTelemetryServiceRPCs(svc TelemetryServiceHttpEndpoints, srv *echo.Echo) {
	RegisterTelemetryServiceRPCsGroup(svc, srv.Group("/"))
}

func RegisterTelemetryServiceRPCsGroup(svc TelemetryServiceHttpEndpoints, srv *echo.Group) {
	compat := &telemetryServiceHttpAdapter{svc}
	srv.POST("telemetry-service/publish", compat.Publish)
}

type telemetryServiceHttpAdapter struct {
	svc TelemetryServiceHttpEndpoints
}

// HTTP compatibility wrapper for TelemetryService.publish.
func (s *telemetryServiceHttpAdapter) Publish(c echo.Context) error {
	req := new(Telemetry)
	if err := c.Bind(req); err != nil {
		return err
	}
	err := s.svc.Publish(c, req)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}
	return c.NoContent(http.StatusNoContent)
}
